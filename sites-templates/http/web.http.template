map ${DOLLAR}http_upgrade ${DOLLAR}connection_upgrade{
  default upgrade;
  '' close;
}

server {
  listen 80 default_server;
  server_name ${WEB_SERVER_NAME} www.${WEB_SERVER_NAME};
  
  location / {
    rewrite ^ https://${DOLLAR}host${DOLLAR}request_uri? permanent;
  }
}

server {
  # can't use reuseport
  # include conf.d/quic-http2.conf;
  listen 443 quic reuseport backlog=4096;
  listen 443 ssl;

  http2 on;
  quic_retry on;
  ssl_early_data on;
  proxy_set_header Early-Data ${DOLLAR}ssl_early_data;
  http3_hq on;

  server_name ${WEB_SERVER_NAME} www.${WEB_SERVER_NAME};

  limit_conn conn ${MAX_CONN_WEB};
  limit_req zone=web burst=500 nodelay;

  ssl_certificate /etc/ssl/certs/localhost.crt;
  ssl_certificate_key /etc/ssl/private/localhost.key;

  include conf.d/ssl.conf;

  location / {
    include conf.d/cache-quic-headers.conf;
    include conf.d/cors-preflight.conf;

    proxy_cache cache;
    proxy_cache_valid 200 5s;
    proxy_cache_bypass ${DOLLAR}http_authorization;

    proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
    proxy_set_header Host ${DOLLAR}host;
    proxy_set_header Connection "";

    proxy_pass http://webserver;
    proxy_http_version 1.1;
  }

  location /wss {
    proxy_pass http://webserver/wss;
    proxy_http_version 1.1;
    proxy_set_header Connection ${DOLLAR}connection_upgrade;
    proxy_set_header Upgrade ${DOLLAR}http_upgrade;
  }

  # nginx health check, not webserver's app
  location /health {
    add_header "Content-Type" text/plain;
    return 200 'ok';
  }
}
